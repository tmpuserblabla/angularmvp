{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/api/api.interceptor.ts","./src/app/api/api.module.ts","./src/app/api/api.service.ts","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/comment/comment.component.ts","./src/app/components/comment/comment.component.html","./src/app/components/post/post.component.ts","./src/app/components/post/post.component.html","./src/app/components/star-rating/star-rating.component.ts","./src/app/components/star-rating/star-rating.component.html","./src/app/modules/material/material.module.ts","./src/app/modules/post/post.module.ts","./src/app/screens/current-post/current-post.component.ts","./src/app/screens/current-post/current-post.component.html","./src/app/screens/guest-book/guest-book.component.ts","./src/app/screens/guest-book/guest-book.component.html","./src/app/screens/post-list/post.component.ts","./src/app/screens/post-list/post.component.html","./src/app/services/comments/comments.service.ts","./src/app/services/guests/guests.service.ts","./src/app/services/post/post.service.ts","./src/app/store/comments/comments.actions.ts","./src/app/store/comments/comments.effects.ts","./src/app/store/comments/comments.reducer.ts","./src/app/store/guests/guests.actions.ts","./src/app/store/guests/guests.effects.ts","./src/app/store/guests/guests.reducer.ts","./src/app/store/index.ts","./src/app/store/post/post.actions.ts","./src/app/store/post/post.effects.ts","./src/app/store/post/post.reducer.ts","./src/app/store/post/post.selectors.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class ApiHttpInterceptor implements HttpInterceptor {\n\n  constructor() {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const headersConfig = {\n      'Content-Type': 'application/json',\n      // tslint:disable-next-line: object-literal-key-quotes\n      'Accept': 'application/json'\n    };\n\n    const request = req.clone({ url: `https://jsonplaceholder.typicode.com${req.url}`, setHeaders: headersConfig });\n    return next.handle(request);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ApiHttpInterceptor } from './api.interceptor';\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ],\n  providers: [\n    { provide: HTTP_INTERCEPTORS, useClass: ApiHttpInterceptor, multi: true }\n  ],\n})\nexport class ApiModule { }\n","import { Injectable } from '@angular/core';\nimport { ApiModule } from './api.module';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: ApiModule\n})\nexport class ApiService extends HttpClient {\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule, ExtraOptions } from '@angular/router';\nimport { PostScreenComponent } from '@/screens/post-list/post.component';\nimport { CurrentPostComponent } from '@/screens/current-post/current-post.component';\nimport { GuestBookComponent } from '@/screens/guest-book/guest-book.component';\n\nconst routes: Routes = [\n  { path: '', component: PostScreenComponent },\n  { path: 'post/:id', component: CurrentPostComponent },\n  { path: 'guest-book', component: GuestBookComponent },\n];\n\nexport const RoutingComponents = [\n  PostScreenComponent,\n  CurrentPostComponent,\n  GuestBookComponent,\n];\n\nconst routerOptions: ExtraOptions = {\n  useHash: true,\n  anchorScrolling: 'enabled',\n};\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, routerOptions)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  links = [\n    {\n      label: 'Posts',\n      link: '',\n    },\n    {\n      label: 'Guest Book',\n      link: 'guest-book',\n    },\n  ];\n}\n","<nav class=\"nav-bar\" mat-tab-nav-bar mat-align-tabs=\"center\" animationDuration=\"0ms\">\r\n    <a\r\n        mat-tab-link\r\n        *ngFor=\"let link of links\"\r\n        [routerLink]=\"link.link\"\r\n        routerLinkActive #rla=\"routerLinkActive\"\r\n        [routerLinkActiveOptions]=\"{ exact: true }\"\r\n        [active]=\"rla.isActive\"\r\n    >\r\n        {{link.label}}\r\n    </a>\r\n</nav>\r\n<div class=\"content\">\r\n    <router-outlet></router-outlet>\r\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule, RoutingComponents } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { PostModule } from '@/modules/post/post.module';\nimport { ApiModule } from '@/api/api.module';\nimport { StoreModule } from '@ngrx/store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { environment } from '~/environments/environment';\nimport { reducers, metaReducers, effects } from '@/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { MaterialModule } from '@/modules/material/material.module';\nimport { CommonModule } from '@angular/common';\nimport { PostComponent } from '@/components/post/post.component';\nimport { CommentComponent } from '@/components/comment/comment.component';\nimport { StarRatingComponent } from '@/components/star-rating/star-rating.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PostComponent,\n    RoutingComponents,\n    CommentComponent,\n    StarRatingComponent,\n  ],\n  imports: [\n    CommonModule,\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    PostModule,\n    ApiModule,\n    StoreModule.forRoot(reducers, {\n        metaReducers,\n        runtimeChecks: {\n            strictStateImmutability: true,\n            strictActionImmutability: true,\n        }\n    }),\n    EffectsModule.forRoot(effects),\n    StoreDevtoolsModule.instrument({ maxAge: 25, logOnly: environment.production }),\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, Input } from '@angular/core';\nimport { Comment } from '@/store/comments/comments.reducer';\n\n@Component({\n  selector: 'app-comment',\n  templateUrl: './comment.component.html',\n  styleUrls: ['./comment.component.scss']\n})\nexport class CommentComponent {\n  @Input() comment: Comment;\n}\n","<div class=\"comment\">\n    <h3 class=\"mat-h3 comment__title\">{{ comment.name }}</h3>\n    <h5 class=\"mat-h5 comment__subtitle\">{{ comment.email }}</h5>\n    <p class=\"mat-body comment__body\">{{ comment.body }}</p>\n</div>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { Post } from '@/store/post/post.reducer';\n\n@Component({\n  selector: 'app-post',\n  templateUrl: './post.component.html',\n  styleUrls: ['./post.component.scss'],\n})\nexport class PostComponent {\n  @Input() post: Post;\n  @Input() rating = 0;\n  @Output() private ratingUpdated = new EventEmitter();\n\n  starCount = 5;\n\n  onRatingChanged(postId: number, rating: number): void {\n    this.ratingUpdated.emit({ postId, stars: rating });\n  }\n}\n","<div class=\"post\">\n    <mat-card class=\"mat-elevation-z0 outline\">\n        <mat-card-title class=\"post__title\">{{post.title}}</mat-card-title>\n        <mat-card-content>\n            <p>{{ post.body }}</p>\n        </mat-card-content>\n        <app-star-rating [rating]=\"rating\" [starCount]=\"starCount\" (ratingUpdated)=\"onRatingChanged(post.id, $event)\"></app-star-rating>\n        <!-- <star-rating value=\"5\" totalstars=\"5\" checkedcolor=\"red\" uncheckedcolor=\"black\" size=\"24px\" readonly=\"false\"></star-rating> -->\n        <ng-content selector=\".footer\"></ng-content>\n    </mat-card>\n</div>","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-star-rating',\n  templateUrl: './star-rating.component.html',\n  styleUrls: ['./star-rating.component.scss']\n})\nexport class StarRatingComponent {\n  @Input() private rating = 3;\n  @Input() private starCount = 5;\n  @Output() private ratingUpdated = new EventEmitter();\n\n  ratingArr = [...Array(this.starCount)].map((_, i) => i);\n\n  showIcon(index: number): string {\n    if (this.rating >= index + 1) {\n      return 'star';\n    } else {\n      return 'star_border';\n    }\n  }\n\n  onClick(rating: number): void {\n    this.ratingUpdated.emit(rating);\n  }\n}\n","<button\n    mat-icon-button\n    *ngFor=\"let ratingId of ratingArr; index as i\"\n    [id]=\"'star_'+i\"\n    matTooltipPosition=\"above\"\n    (click)=\"onClick(i + 1)\"\n>\n    <mat-icon color=\"primary\">\n        {{ showIcon(i) }}\n    </mat-icon>\n</button>","import { NgModule } from '@angular/core';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatListModule } from '@angular/material/list';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\n\nconst MaterialComponents = [\n  MatCardModule,\n  MatButtonModule,\n  MatListModule,\n  MatFormFieldModule,\n  ReactiveFormsModule,\n  MatInputModule,\n  MatExpansionModule,\n  MatTabsModule,\n  MatToolbarModule,\n  MatIconModule,\n  MatSelectModule,\n  FormsModule\n];\n\n@NgModule({\n  imports: [MaterialComponents],\n  exports: [MaterialComponents]\n})\nexport class MaterialModule { }\n","import { NgModule } from '@angular/core';\n\n\n@NgModule({\n  declarations: [],\n})\nexport class PostModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { State } from '@/store';\nimport { Post, RatingOfPost } from '@/store/post/post.reducer';\nimport { selectPostById } from '@/store/post/post.selectors';\nimport { loadPostById, setRatingOfPostSuccess } from '@/store/post/post.actions';\nimport { Store, select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { tap, exhaustMap, map } from 'rxjs/operators';\nimport { ActivatedRoute } from '@angular/router';\nimport { Comment } from '@/store/comments/comments.reducer';\nimport { loadCommentsByPostId } from '@/store/comments/comments.actions';\n\n@Component({\n  selector: 'app-current-post',\n  templateUrl: './current-post.component.html',\n  styleUrls: ['./current-post.component.scss']\n})\nexport class CurrentPostComponent implements OnInit {\n  post$: Observable<Post>;\n  comments$: Observable<Comment[]>;\n\n  constructor(\n    private store: Store<State>,\n    private route: ActivatedRoute\n  ) {}\n\n  onRatingChanged({ postId, stars }: RatingOfPost): void {\n    this.store.dispatch(setRatingOfPostSuccess({ postId, stars }));\n  }\n\n  ngOnInit(): void {\n    this.post$ = this.route.params.pipe(exhaustMap(({ id }) => {\n      const postId = Number(id);\n      this.store.dispatch(loadCommentsByPostId({ postId }));\n\n      return this.store.select('post').pipe(\n        select(selectPostById, { postId }),\n        tap(post => {\n          if (!post) {\n            this.store.dispatch(loadPostById({ postId }));\n          }\n        })\n      );\n    }));\n\n    this.comments$ = this.store.select('comments')\n      .pipe(map(({ comments }) => comments));\n  }\n}\n","<div class=\"current-post-screen\">\n    <app-post\n        *ngIf=\"post$ | async as post\"\n        [post]=\"post\"\n        [rating]=\"post.stars\"\n        (ratingUpdated)=\"onRatingChanged($event)\"\n    >\n    </app-post>\n    <h1>Commets</h1>\n    <mat-card class=\"commets-list\">\n        <mat-list role=\"list\" *ngIf=\"comments$ | async as comments\">\n            <app-comment\n                class=\"commets-list__item\"\n                *ngFor=\"let comment of comments\"\n                [comment]=\"comment\"\n            ></app-comment>\n        </mat-list>\n    </mat-card>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { State } from '@/store';\nimport { loadGuests, addAuthor } from '@/store/guests/guests.actions';\nimport { Observable } from 'rxjs';\nimport { Guest } from '@/store/guests/guests.reducer';\nimport { map } from 'rxjs/operators';\n\n\n@Component({\n  selector: 'app-guest-book',\n  templateUrl: './guest-book.component.html',\n  styleUrls: ['./guest-book.component.scss']\n})\nexport class GuestBookComponent implements OnInit {\n  guests$: Observable<Guest[]>;\n\n  authorForm = new FormGroup({\n    fullName: new FormControl(''),\n    email: new FormControl('', [Validators.required, Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$')]),\n    message: new FormControl(''),\n  });\n\n  constructor(\n    private store: Store<State>\n  ) { }\n\n\n  addAuthor(): void {\n    const { value, valid } = this.authorForm;\n\n    if (!valid) {\n      return;\n    }\n\n    this.store.dispatch(\n      addAuthor({\n        data: {\n          name: value.fullName,\n          email: value.email,\n          message: value.message\n        }\n      })\n    );\n\n    this.authorForm.reset();\n  }\n\n  ngOnInit(): void {\n    this.store.dispatch(loadGuests());\n\n    this.guests$ = this.store.select('guests').pipe(map(({ guests }) => {\n      return guests;\n    }));\n  }\n}\n","<div class=\"guest-book-screen\">\n    <div class=\"guest-view\">\n        <div>\n            <mat-card class=\"add-author\">\n                <mat-card-header>\n                    <mat-card-title>Add Author</mat-card-title>\n                </mat-card-header>\n                <mat-card-content>\n                    <form class=\"add-author-form\" [formGroup]=\"authorForm\" (ngSubmit)=\"addAuthor()\">\n                        <div class=\"add-author-form__fields\">\n                            <mat-form-field appearance=\"outline\">\n                                <mat-label>Full name</mat-label>\n                                <input formControlName=\"fullName\" type=\"text\" required matInput>\n                                <mat-hint>Enter your full name</mat-hint>\n                            </mat-form-field>\n                            <mat-form-field appearance=\"outline\">\n                                <mat-label>Email</mat-label>\n                                <input formControlName=\"email\" type=\"email\" required matInput>\n                                <mat-hint>Enter your email</mat-hint>\n                            </mat-form-field>\n                            <mat-form-field appearance=\"outline\">\n                                <mat-label>Message</mat-label>\n                                <textarea formControlName=\"message\" minlength=\"20\" required matInput></textarea>\n                                <mat-hint>Enter something...</mat-hint>\n                            </mat-form-field>\n                        </div>\n                        <button class='add-author-form__button' mat-stroked-button color=\"primary\">Send</button>\n                    </form>\n                </mat-card-content>\n            </mat-card>\n        </div>\n        <mat-accordion class=\"add-author__accordion\" multi>\n            <mat-expansion-panel\n                class=\"add-author__expansion-item\"\n                *ngFor=\"let guest of guests$ | async\"\n            >\n              <mat-expansion-panel-header class=\"guest\">\n                    <mat-panel-title>\n                    {{ guest.name }}\n                    </mat-panel-title>\n                    <mat-panel-description>\n                        <img class=\"guest__avatar\" [src]=\"guest.avatar\" />\n                    </mat-panel-description>\n                </mat-expansion-panel-header>\n                <div class=\"guest-info\">\n                    <p *ngIf=\"guest.email\" class=\"guest-info__item\">\n                        <mat-icon class=\"guest-info__item-icon\" aria-label=\"alternate_email icon\">alternate_email</mat-icon>\n                        {{ guest.email }}\n                    </p>\n                    <p *ngIf=\"guest.message\" class=\"guest-info__item\">\n                        <mat-icon class=\"guest-info__item-icon\" aria-label=\"format_quote icon\">format_quote</mat-icon>\n                        {{ guest.message }}\n                    </p>\n                    <p *ngIf=\"guest.username\" class=\"guest-info__item\">\n                        <mat-icon class=\"guest-info__item-icon\" aria-label=\"face icon\">face</mat-icon>\n                        {{ guest.username }}\n                    </p>\n                    <p *ngIf=\"guest.phone\" class=\"guest-info__item\">\n                        <mat-icon class=\"guest-info__item-icon\" aria-label=\"phone icon\">phone</mat-icon>\n                        {{ guest.phone }}\n                    </p>\n                    <p *ngIf=\"guest.website\" class=\"guest-info__item\">\n                        <mat-icon class=\"guest-info__item-icon\" aria-label=\"website icon\">language</mat-icon>\n                        {{ guest.website }}\n                    </p>\n                </div>\n            </mat-expansion-panel>\n        </mat-accordion>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { State } from '@/store';\nimport { Observable } from 'rxjs';\nimport { StatePost, RatingOfPost } from '@/store/post/post.reducer';\nimport { loadPosts, setRatingOfPostSuccess } from '@/store/post/post.actions';\nimport { map } from 'rxjs/operators';\nimport { selectPostsAsc, selectPostsDesc } from '@/store/post/post.selectors';\n\ninterface Sort {\n  value: string;\n  label: string;\n}\n\n@Component({\n  selector: 'app-post-screen',\n  templateUrl: './post.component.html',\n  styleUrls: ['./post.component.scss']\n})\nexport class PostScreenComponent implements OnInit {\n  postState$: Observable<StatePost>;\n\n  constructor(\n    private store: Store<State>\n  ) {\n    this.postState$ = this.store.select('post');\n  }\n\n  sortList: Sort[] = [\n    {value: 'ASC', label: 'New first'},\n    {value: 'DESC', label: 'Old first'}\n  ];\n\n  selectedSortType: string = this.sortList[0].value;\n\n  get posts$(): Observable<any[]> {\n    if (this.selectedSortType === 'ASC') {\n      return this.postState$.pipe(select(selectPostsAsc));\n    } else {\n      return this.postState$.pipe(select(selectPostsDesc));\n    }\n  }\n\n  onRatingChanged({ postId, stars }: RatingOfPost): void {\n    this.store.dispatch(setRatingOfPostSuccess({ postId, stars }));\n  }\n\n  ngOnInit(): void {\n    this.store.dispatch(loadPosts());\n  }\n\n}\n","<div class=\"post-screen\">\r\n    <div class=\"post-view\">\r\n        <div>\r\n            <mat-form-field class=\"post-view__sort\" appearance=\"outline\">\r\n                <mat-label>Sort</mat-label>\r\n                <mat-select [(ngModel)]=\"selectedSortType\" name=\"sort\">\r\n                    <mat-option *ngFor=\"let item of sortList\" [value]=\"item.value\">\r\n                        {{item.label}}\r\n                    </mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n        </div>\r\n        <div class=\"post-list\">\r\n            <app-post\r\n                *ngFor=\"let post of posts$ | async\"\r\n                [post]=\"post\"\r\n                [rating]=\"post.stars\"\r\n                (ratingUpdated)=\"onRatingChanged($event)\"\r\n            >\r\n                <mat-card-actions class=\"footer\">\r\n                    <a mat-stroked-button [routerLink]=\"['/post/' + post.id]\">Open</a>\r\n                </mat-card-actions>\r\n            </app-post>\r\n        </div>\r\n    </div>\r\n</div>","import { Injectable } from '@angular/core';\nimport { ApiService } from '@/api/api.service';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommentsService {\n  constructor(private api: ApiService) { }\n\n  loadCommentsByPostId(postId: number): Observable<any> {\n    return this.api.get(`/posts/${postId}/comments?sort=desc`);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ApiService } from '@/api/api.service';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Guest, PayloadAddAuthor } from '@/store/guests/guests.reducer';\nimport { Md5 } from 'ts-md5/dist/md5';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GuestsService {\n  constructor(private api: ApiService) { }\n\n  private bootstrapGuest(guest: Guest): Guest {\n    const email = guest.email.toLowerCase();\n    const hash = Md5.hashStr(email);\n\n    return {\n      ...guest,\n      email,\n      avatar: `https://www.gravatar.com/avatar/${hash}`\n    };\n  }\n\n  loadGuests(): Observable<Guest[]> {\n    return this.api.get(`/users?sort=desc`).pipe(\n      map((guests: Guest[]) =>\n        guests.map((guest) => this.bootstrapGuest(guest))\n      ));\n  }\n\n  addAuthor(body: PayloadAddAuthor): Observable<any> {\n    return this.api.post('/users', body).pipe(map((guest: Guest) => this.bootstrapGuest(guest)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PostModule } from '@/modules/post/post.module';\nimport { ApiService } from '@/api/api.service';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: PostModule\n})\nexport class PostService {\n  constructor(private api: ApiService) { }\n\n  loadPosts(): Observable<any> {\n    return this.api.get('/posts?sort=desc');\n  }\n\n  loadPostById(postId: number): Observable<any> {\n    return this.api.get(`/posts/${postId}`);\n  }\n}\n","import { createAction, props } from '@ngrx/store';\nimport { Comment } from './comments.reducer';\n\nexport const loadCommentsByPostId = createAction(\n  '[Comments] Load Comments By Post Id',\n  props<{ postId: number }>()\n);\n\nexport const loadCommentsByPostIdSuccess = createAction(\n  '[Comments] Load Comments By Post Id Success',\n  props<{ comments: Comment[] }>()\n);\n\nexport const loadCommentsByPostIdFailure = createAction(\n  '[Comments] Load Comments By Post Id Failure',\n  props<{ error: any }>()\n);\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport * as commentsActions from './comments.actions';\nimport { CommentsService } from '@/services/comments/comments.service';\nimport { of } from 'rxjs';\n\n\n@Injectable()\nexport class CommentsEffects {\n  constructor(\n    private actions$: Actions,\n    private commentsService: CommentsService\n  ) {}\n\n  loadCommentsByPostId$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(commentsActions.loadCommentsByPostId),\n      exhaustMap((action) => {\n        return this.commentsService.loadCommentsByPostId(action.postId).pipe(\n          map((comments) => {\n            return commentsActions.loadCommentsByPostIdSuccess({ comments });\n          }),\n          catchError(error => of(error))\n        );\n      })\n    );\n  });\n}\n","import { Action, createReducer, on } from '@ngrx/store';\nimport { loadCommentsByPostIdSuccess } from './comments.actions';\n\n\nexport const commentsFeatureKey = 'comments';\n\nexport interface Comment {\n    postId: number;\n    id: number;\n    name: string;\n    email: string;\n    body: string;\n}\n\nexport interface StateComments {\n  comments: Comment[];\n}\n\nexport const initialState: StateComments = {\n  comments: []\n};\n\n\nexport const commentsReducer = createReducer(\n  initialState,\n  on(loadCommentsByPostIdSuccess, (state, { comments }) => {\n    return {\n      ...state,\n      comments: [...state.comments, ...comments.filter((comment) => {\n        return comments.some(({ id }) => id !== comment.id);\n      })]\n    };\n  }),\n);\n\n","import { createAction, props } from '@ngrx/store';\nimport { Guest, PayloadAddAuthor } from './guests.reducer';\n\nexport const loadGuests = createAction(\n  '[Guests] Load Guests'\n);\n\nexport const loadGuestsSuccess = createAction(\n  '[Guests] Load Guests Success',\n  props<{ guests: Guest[] }>()\n);\n\nexport const loadGuestsFailure = createAction(\n  '[Guests] Load Guests Failure',\n  props<{ error: any }>()\n);\n\nexport const addAuthor = createAction(\n  '[Guests] Add Author',\n  props<{data: PayloadAddAuthor}>()\n);\n\nexport const addAuthorSuccess = createAction(\n  '[Guests] Add Author Success',\n  props<{ guest: Guest }>()\n);\n\nexport const addAuthorFailure = createAction(\n  '[Guests] Add Author Failure',\n  props<{ error: any }>()\n);\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport * as guestsActions from './guests.actions';\nimport { GuestsService } from '@/services/guests/guests.service';\nimport { of } from 'rxjs';\n\n\n@Injectable()\nexport class GuestsEffects {\n  constructor(\n    private actions$: Actions,\n    private guestsService: GuestsService\n  ) {}\n\n  loadGuests$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(guestsActions.loadGuests),\n      exhaustMap(() => {\n        return this.guestsService.loadGuests().pipe(\n          map((guests) => guestsActions.loadGuestsSuccess({ guests })),\n          catchError(error => of(guestsActions.loadGuestsFailure({ error })))\n        );\n      })\n    );\n  });\n\n  addAuthor$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(guestsActions.addAuthor),\n      exhaustMap(({ data }) => {\n        return this.guestsService.addAuthor(data).pipe(\n          map((guest) => guestsActions.addAuthorSuccess({ guest })),\n          catchError(error => of(guestsActions.addAuthorFailure({ error })))\n        );\n      })\n    );\n  });\n}\n","import { createReducer, on } from '@ngrx/store';\nimport { loadGuestsSuccess, addAuthorSuccess } from './guests.actions';\n\n\nexport const guestsFeatureKey = 'guests';\n\nexport interface Guest {\n    id: number;\n    name: string;\n    email: string;\n    avatar: string;\n    message?: string;\n    website?: string;\n    username?: string;\n    phone?: string;\n}\n\nexport interface PayloadAddAuthor {\n  name: string;\n  email: string;\n  message: string;\n}\n\nexport interface StateGuests {\n  guests: Guest[];\n}\n\nexport const initialState: StateGuests = {\n  guests: []\n};\n\n\nexport const guestsReducer = createReducer(\n  initialState,\n  on(loadGuestsSuccess, (state, { guests }) => {\n    return {\n      ...state,\n      guests\n    };\n  }),\n  on(addAuthorSuccess, (state, { guest }) => {\n    return {\n      ...state,\n      guests: [\n        guest,\n        ...state.guests,\n      ]\n    };\n  })\n);\n\n","import {\r\nActionReducerMap,\r\nMetaReducer\r\n} from '@ngrx/store';\r\nimport { environment } from '~/environments/environment';\r\nimport { StatePost, postReducer } from './post/post.reducer';\r\nimport { StateComments, commentsReducer } from './comments/comments.reducer';\r\nimport { StateGuests, guestsReducer } from './guests/guests.reducer';\r\nimport { PostEffects } from './post/post.effects';\r\nimport { CommentsEffects } from './comments/comments.effects';\r\nimport { GuestsEffects } from './guests/guests.effects';\r\n\r\n\r\nexport interface State {\r\n    post: StatePost;\r\n    comments: StateComments;\r\n    guests: StateGuests;\r\n}\r\n\r\nexport const reducers: ActionReducerMap<State> = {\r\n    post: postReducer,\r\n    comments: commentsReducer,\r\n    guests: guestsReducer\r\n};\r\n\r\nexport const effects = [\r\n    PostEffects,\r\n    CommentsEffects,\r\n    GuestsEffects\r\n];\r\n\r\nexport const metaReducers: MetaReducer<State>[] = !environment.production ? [] : [];\r\n","import { createAction, props } from '@ngrx/store';\nimport { Post } from './post.reducer';\n\nexport const loadPosts = createAction(\n  '[Post] Load Posts'\n);\n\nexport const loadPostsSuccess = createAction(\n  '[Post] Load Posts Success',\n  props<{ data: any[] }>()\n);\n\nexport const loadPostsFailure = createAction(\n  '[Post] Load Posts Failure',\n  props<{ error: any }>()\n);\n\n\nexport const loadPostById = createAction(\n  '[Post] Load Post By Id',\n  props<{ postId: number }>()\n);\n\nexport const addPostByIdSuccess = createAction(\n  '[Post] Load Post By Id Success',\n  props<{ post: Post }>()\n);\n\nexport const setRatingOfPostSuccess = createAction(\n  '[Post] Set Rating Of Post Success',\n  props<{ postId: number, stars: number }>()\n);\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport * as PostActions from './post.actions';\nimport { PostService } from '@/services/post/post.service';\nimport { of } from 'rxjs';\n\n\n\n@Injectable()\nexport class PostEffects {\n  constructor(\n    private actions$: Actions,\n    private postService: PostService\n  ) {}\n\n  loadPosts$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(PostActions.loadPosts),\n      exhaustMap((_) => {\n          return this.postService.loadPosts().pipe(\n            map((data) => {\n              return PostActions.loadPostsSuccess({ data });\n            }),\n            catchError(error => of(error))\n          );\n        }\n      )\n    );\n  });\n\n  loadPostById$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(PostActions.loadPostById),\n      exhaustMap((action) => {\n          return this.postService.loadPostById(action.postId).pipe(\n            map((post) => {\n              return PostActions.addPostByIdSuccess({ post });\n            }),\n            catchError(error => of(error))\n          );\n        }\n      )\n    );\n  });\n\n}\n","import { createReducer, on } from '@ngrx/store';\nimport { loadPostsSuccess, addPostByIdSuccess, setRatingOfPostSuccess } from './post.actions';\n\n\nexport const postFeatureKey = 'post';\n\nexport interface Post {\n  id: number;\n  title: string;\n  body: string;\n  stars?: number;\n}\n\nexport interface RatingOfPost {\n  stars: number;\n  postId: number;\n}\n\nexport interface StatePost {\n  posts: Post[];\n  ratingOfPosts: RatingOfPost[];\n}\n\nexport const initialState: StatePost = {\n  posts: [],\n  ratingOfPosts: []\n};\n\n\nexport const postReducer = createReducer(\n  initialState,\n  on(loadPostsSuccess, (state, { data }) => {\n    return {\n      ...state,\n      posts: data\n    };\n  }),\n  on(addPostByIdSuccess, (state, { post }) => {\n    return {\n      ...state,\n      posts: [...state.posts, post]\n    };\n  }),\n  on(setRatingOfPostSuccess, (state, { postId, stars }) => {\n    if (state.ratingOfPosts.some((rating) => rating.postId === postId)) {\n      return {\n        ...state,\n        ratingOfPosts: state.ratingOfPosts.map((rating) => {\n          if (rating.postId === postId) {\n            return {\n              postId,\n              stars\n            };\n          }\n\n          return rating;\n        })\n      };\n    }\n\n    return {\n      ...state,\n      ratingOfPosts: [...state.ratingOfPosts, {\n        stars,\n        postId\n      }]\n    };\n  }),\n);\n\n","import { createSelector } from '@ngrx/store';\nimport { StatePost, Post } from './post.reducer';\n\nexport const selectPosts = (state: StatePost) => state.posts.map((post) => {\n    const rating = state.ratingOfPosts.find(({ postId }) => postId === post.id);\n    if (!rating) {\n        return post;\n    }\n\n    return {\n        ...post,\n        stars: rating.stars\n    };\n});\n\nexport const selectPostsAsc = createSelector(\n    selectPosts,\n    (posts: Post[]) => [...posts].sort((a, b) => {\n        return b.id - a.id;\n    })\n);\n\nexport const selectPostsDesc = createSelector(\n    selectPosts,\n    (posts: Post[]) => [...posts].sort((a, b) => {\n        return a.id - b.id;\n    })\n);\n\n\ninterface PropsSelectPostById {\n    postId: number;\n}\n\nexport const selectPostById = createSelector(\n    selectPosts,\n    (posts: Post[], { postId }: PropsSelectPostById) => posts.find(({ id }) => id === postId)\n);\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}